// Code generated by mockery v2.33.2. DO NOT EDIT.

package servicesmocks

import (
	context "context"

	models "github.com/a-novel/votes-service/pkg/models"
	mock "github.com/stretchr/testify/mock"
)

// ListUserVotesService is an autogenerated mock type for the ListUserVotesService type
type ListUserVotesService struct {
	mock.Mock
}

type ListUserVotesService_Expecter struct {
	mock *mock.Mock
}

func (_m *ListUserVotesService) EXPECT() *ListUserVotesService_Expecter {
	return &ListUserVotesService_Expecter{mock: &_m.Mock}
}

// List provides a mock function with given fields: ctx, tokenRaw, query
func (_m *ListUserVotesService) List(ctx context.Context, tokenRaw string, query *models.ListUserVotesQuery) ([]*models.Vote, error) {
	ret := _m.Called(ctx, tokenRaw, query)

	var r0 []*models.Vote
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.ListUserVotesQuery) ([]*models.Vote, error)); ok {
		return rf(ctx, tokenRaw, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.ListUserVotesQuery) []*models.Vote); ok {
		r0 = rf(ctx, tokenRaw, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Vote)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *models.ListUserVotesQuery) error); ok {
		r1 = rf(ctx, tokenRaw, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUserVotesService_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type ListUserVotesService_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - tokenRaw string
//   - query *models.ListUserVotesQuery
func (_e *ListUserVotesService_Expecter) List(ctx interface{}, tokenRaw interface{}, query interface{}) *ListUserVotesService_List_Call {
	return &ListUserVotesService_List_Call{Call: _e.mock.On("List", ctx, tokenRaw, query)}
}

func (_c *ListUserVotesService_List_Call) Run(run func(ctx context.Context, tokenRaw string, query *models.ListUserVotesQuery)) *ListUserVotesService_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*models.ListUserVotesQuery))
	})
	return _c
}

func (_c *ListUserVotesService_List_Call) Return(_a0 []*models.Vote, _a1 error) *ListUserVotesService_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ListUserVotesService_List_Call) RunAndReturn(run func(context.Context, string, *models.ListUserVotesQuery) ([]*models.Vote, error)) *ListUserVotesService_List_Call {
	_c.Call.Return(run)
	return _c
}

// NewListUserVotesService creates a new instance of ListUserVotesService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewListUserVotesService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ListUserVotesService {
	mock := &ListUserVotesService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
