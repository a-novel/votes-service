// Code generated by mockery v2.33.2. DO NOT EDIT.

package daomocks

import (
	context "context"

	dao "github.com/a-novel/votes-service/pkg/dao"
	mock "github.com/stretchr/testify/mock"

	models "github.com/a-novel/votes-service/pkg/models"

	time "time"

	uuid "github.com/google/uuid"
)

// VotesRepository is an autogenerated mock type for the VotesRepository type
type VotesRepository struct {
	mock.Mock
}

type VotesRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *VotesRepository) EXPECT() *VotesRepository_Expecter {
	return &VotesRepository_Expecter{mock: &_m.Mock}
}

// Cast provides a mock function with given fields: ctx, userID, targetID, target, vote, id, now
func (_m *VotesRepository) Cast(ctx context.Context, userID uuid.UUID, targetID uuid.UUID, target string, vote *models.VoteValue, id uuid.UUID, now time.Time) (*dao.VoteModel, error) {
	ret := _m.Called(ctx, userID, targetID, target, vote, id, now)

	var r0 *dao.VoteModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, string, *models.VoteValue, uuid.UUID, time.Time) (*dao.VoteModel, error)); ok {
		return rf(ctx, userID, targetID, target, vote, id, now)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, string, *models.VoteValue, uuid.UUID, time.Time) *dao.VoteModel); ok {
		r0 = rf(ctx, userID, targetID, target, vote, id, now)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.VoteModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID, string, *models.VoteValue, uuid.UUID, time.Time) error); ok {
		r1 = rf(ctx, userID, targetID, target, vote, id, now)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VotesRepository_Cast_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cast'
type VotesRepository_Cast_Call struct {
	*mock.Call
}

// Cast is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
//   - targetID uuid.UUID
//   - target string
//   - vote *models.VoteValue
//   - id uuid.UUID
//   - now time.Time
func (_e *VotesRepository_Expecter) Cast(ctx interface{}, userID interface{}, targetID interface{}, target interface{}, vote interface{}, id interface{}, now interface{}) *VotesRepository_Cast_Call {
	return &VotesRepository_Cast_Call{Call: _e.mock.On("Cast", ctx, userID, targetID, target, vote, id, now)}
}

func (_c *VotesRepository_Cast_Call) Run(run func(ctx context.Context, userID uuid.UUID, targetID uuid.UUID, target string, vote *models.VoteValue, id uuid.UUID, now time.Time)) *VotesRepository_Cast_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID), args[3].(string), args[4].(*models.VoteValue), args[5].(uuid.UUID), args[6].(time.Time))
	})
	return _c
}

func (_c *VotesRepository_Cast_Call) Return(_a0 *dao.VoteModel, _a1 error) *VotesRepository_Cast_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *VotesRepository_Cast_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID, string, *models.VoteValue, uuid.UUID, time.Time) (*dao.VoteModel, error)) *VotesRepository_Cast_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, userID, targetID, target
func (_m *VotesRepository) Get(ctx context.Context, userID uuid.UUID, targetID uuid.UUID, target string) (*dao.VoteModel, error) {
	ret := _m.Called(ctx, userID, targetID, target)

	var r0 *dao.VoteModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, string) (*dao.VoteModel, error)); ok {
		return rf(ctx, userID, targetID, target)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, string) *dao.VoteModel); ok {
		r0 = rf(ctx, userID, targetID, target)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.VoteModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID, string) error); ok {
		r1 = rf(ctx, userID, targetID, target)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VotesRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type VotesRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
//   - targetID uuid.UUID
//   - target string
func (_e *VotesRepository_Expecter) Get(ctx interface{}, userID interface{}, targetID interface{}, target interface{}) *VotesRepository_Get_Call {
	return &VotesRepository_Get_Call{Call: _e.mock.On("Get", ctx, userID, targetID, target)}
}

func (_c *VotesRepository_Get_Call) Run(run func(ctx context.Context, userID uuid.UUID, targetID uuid.UUID, target string)) *VotesRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID), args[3].(string))
	})
	return _c
}

func (_c *VotesRepository_Get_Call) Return(_a0 *dao.VoteModel, _a1 error) *VotesRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *VotesRepository_Get_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID, string) (*dao.VoteModel, error)) *VotesRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetSummary provides a mock function with given fields: ctx, targetID, target
func (_m *VotesRepository) GetSummary(ctx context.Context, targetID uuid.UUID, target string) (*dao.VotesSummaryModel, error) {
	ret := _m.Called(ctx, targetID, target)

	var r0 *dao.VotesSummaryModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) (*dao.VotesSummaryModel, error)); ok {
		return rf(ctx, targetID, target)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) *dao.VotesSummaryModel); ok {
		r0 = rf(ctx, targetID, target)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dao.VotesSummaryModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string) error); ok {
		r1 = rf(ctx, targetID, target)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VotesRepository_GetSummary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSummary'
type VotesRepository_GetSummary_Call struct {
	*mock.Call
}

// GetSummary is a helper method to define mock.On call
//   - ctx context.Context
//   - targetID uuid.UUID
//   - target string
func (_e *VotesRepository_Expecter) GetSummary(ctx interface{}, targetID interface{}, target interface{}) *VotesRepository_GetSummary_Call {
	return &VotesRepository_GetSummary_Call{Call: _e.mock.On("GetSummary", ctx, targetID, target)}
}

func (_c *VotesRepository_GetSummary_Call) Run(run func(ctx context.Context, targetID uuid.UUID, target string)) *VotesRepository_GetSummary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *VotesRepository_GetSummary_Call) Return(_a0 *dao.VotesSummaryModel, _a1 error) *VotesRepository_GetSummary_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *VotesRepository_GetSummary_Call) RunAndReturn(run func(context.Context, uuid.UUID, string) (*dao.VotesSummaryModel, error)) *VotesRepository_GetSummary_Call {
	_c.Call.Return(run)
	return _c
}

// ListUserVotes provides a mock function with given fields: ctx, userID, target, limit, offset
func (_m *VotesRepository) ListUserVotes(ctx context.Context, userID uuid.UUID, target string, limit int, offset int) ([]*dao.VoteModel, error) {
	ret := _m.Called(ctx, userID, target, limit, offset)

	var r0 []*dao.VoteModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, int, int) ([]*dao.VoteModel, error)); ok {
		return rf(ctx, userID, target, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, int, int) []*dao.VoteModel); ok {
		r0 = rf(ctx, userID, target, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dao.VoteModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string, int, int) error); ok {
		r1 = rf(ctx, userID, target, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VotesRepository_ListUserVotes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUserVotes'
type VotesRepository_ListUserVotes_Call struct {
	*mock.Call
}

// ListUserVotes is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
//   - target string
//   - limit int
//   - offset int
func (_e *VotesRepository_Expecter) ListUserVotes(ctx interface{}, userID interface{}, target interface{}, limit interface{}, offset interface{}) *VotesRepository_ListUserVotes_Call {
	return &VotesRepository_ListUserVotes_Call{Call: _e.mock.On("ListUserVotes", ctx, userID, target, limit, offset)}
}

func (_c *VotesRepository_ListUserVotes_Call) Run(run func(ctx context.Context, userID uuid.UUID, target string, limit int, offset int)) *VotesRepository_ListUserVotes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string), args[3].(int), args[4].(int))
	})
	return _c
}

func (_c *VotesRepository_ListUserVotes_Call) Return(_a0 []*dao.VoteModel, _a1 error) *VotesRepository_ListUserVotes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *VotesRepository_ListUserVotes_Call) RunAndReturn(run func(context.Context, uuid.UUID, string, int, int) ([]*dao.VoteModel, error)) *VotesRepository_ListUserVotes_Call {
	_c.Call.Return(run)
	return _c
}

// RunInTx provides a mock function with given fields: ctx, f
func (_m *VotesRepository) RunInTx(ctx context.Context, f func(context.Context, dao.VotesRepository) error) error {
	ret := _m.Called(ctx, f)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(context.Context, dao.VotesRepository) error) error); ok {
		r0 = rf(ctx, f)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VotesRepository_RunInTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunInTx'
type VotesRepository_RunInTx_Call struct {
	*mock.Call
}

// RunInTx is a helper method to define mock.On call
//   - ctx context.Context
//   - f func(context.Context , dao.VotesRepository) error
func (_e *VotesRepository_Expecter) RunInTx(ctx interface{}, f interface{}) *VotesRepository_RunInTx_Call {
	return &VotesRepository_RunInTx_Call{Call: _e.mock.On("RunInTx", ctx, f)}
}

func (_c *VotesRepository_RunInTx_Call) Run(run func(ctx context.Context, f func(context.Context, dao.VotesRepository) error)) *VotesRepository_RunInTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(context.Context, dao.VotesRepository) error))
	})
	return _c
}

func (_c *VotesRepository_RunInTx_Call) Return(_a0 error) *VotesRepository_RunInTx_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *VotesRepository_RunInTx_Call) RunAndReturn(run func(context.Context, func(context.Context, dao.VotesRepository) error) error) *VotesRepository_RunInTx_Call {
	_c.Call.Return(run)
	return _c
}

// NewVotesRepository creates a new instance of VotesRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVotesRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *VotesRepository {
	mock := &VotesRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
